SQL Solutions for Assignment - Level A Task
____________________________________________________________________________________________________________________________________________________________________________________________________________________

Step-by-Step Guide to Install AdventureWorks Database
To get started with the AdventureWorks database, follow these steps to download and install it on your SQL Server:

1. Download AdventureWorks Database:

   • Go to the Microsoft SQL Server Samples GitHub repository.
   • Navigate to samples/databases/adventure-works.
   • Download the .bak file for the AdventureWorks 2019 OLTP database. Direct link: AdventureWorks2019.bak.
   • Restore the AdventureWorks Database:

Use SQL Server Management Studio (SSMS) or any other SQL Server tool to restore the downloaded .bak file to your SQL Server instance.
Make sure to use the AdventureWorks 2019 OLTP database for your tasks.

List of SQL Queries
List of all customers:

SELECT * FROM Sales.Customer;
List of all customers where company name ends with 'N':

SELECT * 
FROM Sales.Store s
JOIN Sales.Customer c ON s.BusinessEntityID = c.StoreID
WHERE s.Name LIKE '%N';
List of all customers who live in Berlin or London:

SELECT c.*
FROM Sales.Customer c
JOIN Person.BusinessEntityAddress bea ON c.CustomerID = bea.BusinessEntityID
JOIN Person.Address a ON bea.AddressID = a.AddressID
WHERE a.City IN ('Berlin', 'London');
List of all customers who live in UK or USA:

SELECT c.*
FROM Sales.Customer c
JOIN Person.BusinessEntityAddress bea ON c.CustomerID = bea.BusinessEntityID
JOIN Person.Address a ON bea.AddressID = a.AddressID
JOIN Person.StateProvince sp ON a.StateProvinceID = sp.StateProvinceID
WHERE sp.CountryRegionCode IN ('UK', 'US');
List of all products sorted by product name:

SELECT Name 
FROM Production.Product
ORDER BY Name;
List of all products where product name starts with an A:

SELECT ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate
FROM Production.Product
WHERE Name LIKE 'A%'
ORDER BY Name;
List of customers who ever placed an order:

SELECT DISTINCT c.*
FROM Sales.Customer c
JOIN Sales.SalesOrderHeader soh ON c.CustomerID = soh.CustomerID;
List of customers who live in London and have bought chai:

SELECT DISTINCT c.*
FROM Sales.Customer c
JOIN Sales.SalesOrderHeader soh ON c.CustomerID = soh.CustomerID
JOIN Sales.SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID
JOIN Production.Product p ON sod.ProductID = p.ProductID
JOIN Person.BusinessEntityAddress bea ON soh.ShipToAddressID = bea.BusinessEntityID
JOIN Person.Address a ON bea.AddressID = a.AddressID
WHERE a.City = 'London' AND p.Name = 'Chai';
List of customer who never placed an order:

SELECT * FROM Sales.Customer c
WHERE NOT EXISTS (
    SELECT 1
    FROM Sales.SalesOrderHeader soh
    WHERE c.CustomerID = soh.CustomerID
);
List of customers who ordered a Tofu:

SELECT DISTINCT c.*
FROM Sales.Customer c
JOIN Sales.SalesOrderHeader soh ON c.CustomerID = soh.CustomerID
JOIN Sales.SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID
JOIN Production.Product p ON sod.ProductID = p.ProductID
WHERE p.Name = 'Tofu';
Details of first order of the system:

SELECT TOP 1 *
FROM Sales.SalesOrderHeader
ORDER BY OrderDate ASC;
Find the details of most expensive order date:

WITH OrderTotals AS (
    SELECT 
        SalesOrderID,
        SUM(LineTotal) AS TotalOrderCost
    FROM 
        Sales.SalesOrderDetail
    GROUP BY 
        SalesOrderID
)
SELECT 
    soh.SalesOrderID,
    soh.OrderDate,
    soh.DueDate,
    soh.ShipDate,
    soh.Status,
    soh.OnlineOrderFlag,
    soh.SalesOrderNumber,
    soh.PurchaseOrderNumber,
    soh.AccountNumber,
    soh.CustomerID,
    soh.SalesPersonID,
    soh.TerritoryID,
    soh.BillToAddressID,
    soh.ShipToAddressID,
    soh.ShipMethodID,
    soh.CreditCardID,
    soh.CreditCardApprovalCode,
    soh.CurrencyRateID,
    soh.SubTotal,
    soh.TaxAmt,
    soh.Freight,
    soh.TotalDue,
    soh.Comment,
    soh.rowguid,
    soh.ModifiedDate,
    ot.TotalOrderCost
FROM 
    Sales.SalesOrderHeader soh
JOIN 
    OrderTotals ot ON soh.SalesOrderID = ot.SalesOrderID
ORDER BY 
    ot.TotalOrderCost DESC;
For each order get the OrderID and average quantity of items in that order:

SELECT 
    SalesOrderID,
    AVG(OrderQty) AS AverageQuantity
FROM 
    Sales.SalesOrderDetail
GROUP BY 
    SalesOrderID;
For each order get the OrderID, minimum quantity and maximum quantity for that order:

SELECT 
    SalesOrderID,
    MIN(OrderQty) AS MinimumQuantity,
    MAX(OrderQty) AS MaximumQuantity
FROM 
    Sales.SalesOrderDetail
GROUP BY 
    SalesOrderID;
Get a list of all managers and total no of employees who report to them:

SELECT 
    E.BusinessEntityID AS ManagerID,
    P.FirstName + ' ' + P.LastName AS ManagerName,
    COUNT(RE.BusinessEntityID) AS TotalEmployees
FROM 
    HumanResources.Employee AS E
INNER JOIN 
    Person.Person AS P ON E.BusinessEntityID = P.BusinessEntityID
LEFT JOIN 
    HumanResources.Employee AS RE ON RE.OrganizationNode.GetAncestor(1) = E.OrganizationNode
GROUP BY 
    E.BusinessEntityID, P.FirstName, P.LastName
ORDER BY 
    TotalEmployees DESC;
Get the OrderID and total quantity for each order that has a total quantity of greater than 300:

SELECT 
    SalesOrderID,
    SUM(OrderQty) AS TotalQuantity
FROM 
    Sales.SalesOrderDetail
GROUP BY 
    SalesOrderID
HAVING 
    SUM(OrderQty) > 300;
List of all the orders placed on or after 1996/12/31:

SELECT *
FROM Sales.SalesOrderHeader
WHERE OrderDate >= '1996-12-31';
List of all orders shipped to Canada:

SELECT 
    soh.SalesOrderID,
    soh.OrderDate,
    soh.ShipDate,
    soh.Status,
    soh.TotalDue,
    a.AddressLine1,
    a.AddressLine2,
    a.City,
    sp.Name AS StateProvince,
    cr.Name AS CountryRegion
FROM 
    Sales.SalesOrderHeader soh
JOIN 
    Person.Address a ON soh.ShipToAddressID = a.AddressID
JOIN 
    Person.StateProvince sp ON a.StateProvinceID = sp.StateProvinceID
JOIN 
    Person.CountryRegion cr ON sp.CountryRegionCode = cr.CountryRegionCode
WHERE 
    cr.Name = 'Canada';
List of all orders with order total > 200:

SELECT *
FROM Sales.SalesOrderHeader
WHERE TotalDue > 200;
List of all countries and sales made in each country:

SELECT 
    cr.Name AS Country,
    SUM(soh.TotalDue) AS TotalSales
FROM 
    Sales.SalesOrderHeader soh
JOIN 
    Person.Address a ON soh.ShipToAddressID = a.AddressID
JOIN 
    Person.StateProvince sp ON a.StateProvinceID = sp.StateProvinceID
JOIN 
    Person.CountryRegion cr ON sp.CountryRegionCode = cr.CountryRegionCode
GROUP BY 
    cr.Name
ORDER BY 
    TotalSales DESC;
List of customers' contact names and number of orders they placed:

SELECT 
    p.FirstName + ' ' + p.LastName AS ContactName,
    COUNT(soh.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderHeader soh
JOIN 
    Sales.Customer c ON soh.CustomerID = c.CustomerID
JOIN 
    Person.Person p ON c.PersonID = p.BusinessEntityID
GROUP BY 
    p.FirstName, p.LastName
ORDER BY 
    NumberOfOrders DESC;
List of customers' contact names who have placed more than 3 orders:

SELECT 
    P.FirstName + ' ' + P.LastName AS ContactName,
    COUNT(SOH.SalesOrderID) AS NumberOfOrders


FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.Customer AS C ON SOH.CustomerID = C.CustomerID
JOIN 
    Person.Person AS P ON C.PersonID = P.BusinessEntityID
GROUP BY 
    P.FirstName, P.LastName
HAVING 
    COUNT(SOH.SalesOrderID) > 3;
Here's the continuation of the SQL queries for tasks 23 to 42:

List of SQL Queries (continued)
List of customers' contact names who have never placed an order:

SELECT 
    P.FirstName + ' ' + P.LastName AS ContactName
FROM 
    Sales.Customer AS C
JOIN 
    Person.Person AS P ON C.PersonID = P.BusinessEntityID
LEFT JOIN 
    Sales.SalesOrderHeader AS SOH ON C.CustomerID = SOH.CustomerID
WHERE 
    SOH.SalesOrderID IS NULL;
List of customers with no contact name:

SELECT 
    C.*
FROM 
    Sales.Customer AS C
LEFT JOIN 
    Person.Person AS P ON C.PersonID = P.BusinessEntityID
WHERE 
    P.BusinessEntityID IS NULL;
List of all cities and the number of customers in each city:

SELECT 
    A.City,
    COUNT(C.CustomerID) AS NumberOfCustomers
FROM 
    Sales.Customer AS C
JOIN 
    Person.BusinessEntityAddress AS BEA ON C.CustomerID = BEA.BusinessEntityID
JOIN 
    Person.Address AS A ON BEA.AddressID = A.AddressID
GROUP BY 
    A.City
ORDER BY 
    NumberOfCustomers DESC;
List of customers who live in same city as a store:

SELECT 
    DISTINCT C.*
FROM 
    Sales.Customer AS C
JOIN 
    Person.BusinessEntityAddress AS BEA ON C.CustomerID = BEA.BusinessEntityID
JOIN 
    Person.Address AS A ON BEA.AddressID = A.AddressID
JOIN 
    Sales.Store AS S ON A.City = S.City;
List of cities and number of stores in each city:

SELECT 
    City,
    COUNT(*) AS NumberOfStores
FROM 
    Sales.Store
GROUP BY 
    City
ORDER BY 
    NumberOfStores DESC;
List of orders placed by customers living in cities with more than 2 stores:

SELECT 
    soh.*
FROM 
    Sales.SalesOrderHeader AS soh
JOIN 
    Sales.Customer AS c ON soh.CustomerID = c.CustomerID
JOIN 
    Person.BusinessEntityAddress AS bea ON c.CustomerID = bea.BusinessEntityID
JOIN 
    Person.Address AS a ON bea.AddressID = a.AddressID
WHERE 
    a.City IN (
        SELECT 
            City
        FROM 
            Sales.Store
        GROUP BY 
            City
        HAVING 
            COUNT(*) > 2
    );
List of customers who live in the same state as a store:

SELECT 
    DISTINCT C.*
FROM 
    Sales.Customer AS C
JOIN 
    Person.BusinessEntityAddress AS BEA ON C.CustomerID = BEA.BusinessEntityID
JOIN 
    Person.Address AS A ON BEA.AddressID = A.AddressID
JOIN 
    Sales.Store AS S ON A.StateProvinceID = S.StateProvinceID;
List of states and number of stores in each state:

SELECT 
    SP.Name AS StateProvince,
    COUNT(*) AS NumberOfStores
FROM 
    Sales.Store AS S
JOIN 
    Person.StateProvince AS SP ON S.StateProvinceID = SP.StateProvinceID
GROUP BY 
    SP.Name
ORDER BY 
    NumberOfStores DESC;
List of orders placed by customers living in states with more than 5 stores:

SELECT 
    soh.*
FROM 
    Sales.SalesOrderHeader AS soh
JOIN 
    Sales.Customer AS c ON soh.CustomerID = c.CustomerID
JOIN 
    Person.BusinessEntityAddress AS bea ON c.CustomerID = bea.BusinessEntityID
JOIN 
    Person.Address AS a ON bea.AddressID = a.AddressID
WHERE 
    a.StateProvinceID IN (
        SELECT 
            S.StateProvinceID
        FROM 
            Sales.Store AS S
        GROUP BY 
            S.StateProvinceID
        HAVING 
            COUNT(*) > 5
    );
List of products and the number of times they have been ordered:

SELECT 
    P.Name AS ProductName,
    COUNT(SOD.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderDetail AS SOD
JOIN 
    Production.Product AS P ON SOD.ProductID = P.ProductID
GROUP BY 
    P.Name
ORDER BY 
    NumberOfOrders DESC;
List of products and the total quantity ordered:

SELECT 
    P.Name AS ProductName,
    SUM(SOD.OrderQty) AS TotalQuantityOrdered
FROM 
    Sales.SalesOrderDetail AS SOD
JOIN 
    Production.Product AS P ON SOD.ProductID = P.ProductID
GROUP BY 
    P.Name
ORDER BY 
    TotalQuantityOrdered DESC;
List of products ordered more than 1000 times:

SELECT 
    P.Name AS ProductName,
    COUNT(SOD.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderDetail AS SOD
JOIN 
    Production.Product AS P ON SOD.ProductID = P.ProductID
GROUP BY 
    P.Name
HAVING 
    COUNT(SOD.SalesOrderID) > 1000
ORDER BY 
    NumberOfOrders DESC;
List of products ordered less than 10 times:

SELECT 
    P.Name AS ProductName,
    COUNT(SOD.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderDetail AS SOD
JOIN 
    Production.Product AS P ON SOD.ProductID = P.ProductID
GROUP BY 
    P.Name
HAVING 
    COUNT(SOD.SalesOrderID) < 10
ORDER BY 
    NumberOfOrders ASC;
List of stores and the total sales amount for each store:

SELECT 
    S.Name AS StoreName,
    SUM(SOH.TotalDue) AS TotalSalesAmount
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.Store AS S ON SOH.ShipToAddressID = S.BusinessEntityID
GROUP BY 
    S.Name
ORDER BY 
    TotalSalesAmount DESC;
List of stores with total sales amount greater than 500000:

SELECT 
    S.Name AS StoreName,
    SUM(SOH.TotalDue) AS TotalSalesAmount
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.Store AS S ON SOH.ShipToAddressID = S.BusinessEntityID
GROUP BY 
    S.Name
HAVING 
    SUM(SOH.TotalDue) > 500000
ORDER BY 
    TotalSalesAmount DESC;
List of stores and the number of orders for each store:

SELECT 
    S.Name AS StoreName,
    COUNT(SOH.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.Store AS S ON SOH.ShipToAddressID = S.BusinessEntityID
GROUP BY 
    S.Name
ORDER BY 
    NumberOfOrders DESC;
List of stores with more than 200 orders:

SELECT 
    S.Name AS StoreName,
    COUNT(SOH.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.Store AS S ON SOH.ShipToAddressID = S.BusinessEntityID
GROUP BY 
    S.Name
HAVING 
    COUNT(SOH.SalesOrderID) > 200
ORDER BY 
    NumberOfOrders DESC;
List of salespersons and the total sales amount for each salesperson:

SELECT 
    SP.FirstName + ' ' + SP.LastName AS SalesPersonName,
    SUM(SOH.TotalDue) AS TotalSalesAmount
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.SalesPerson AS S ON SOH.SalesPersonID = S.BusinessEntityID
JOIN 
    Person.Person AS SP ON S.BusinessEntityID = SP.BusinessEntityID
GROUP BY 
    SP.FirstName, SP.LastName
ORDER BY 
    TotalSalesAmount DESC;
List of salespersons with total sales amount greater than 1000000:

SELECT 
    SP.FirstName + ' ' + SP.LastName AS SalesPersonName,
    SUM(SOH.TotalDue) AS TotalSalesAmount
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.SalesPerson AS S ON SOH.SalesPersonID = S.BusinessEntityID
JOIN 
    Person.Person AS SP ON S.BusinessEntityID = SP.BusinessEntityID
GROUP BY 
    SP.FirstName, SP.LastName
HAVING 
    SUM(SOH.TotalDue) > 100
0000 ORDER BY TotalSalesAmount DESC; ```

List of salespersons and the number of orders for each salesperson:
SELECT 
    SP.FirstName + ' ' + SP.LastName AS SalesPersonName,
    COUNT(SOH.SalesOrderID) AS NumberOfOrders
FROM 
    Sales.SalesOrderHeader AS SOH
JOIN 
    Sales.SalesPerson AS S ON SOH.SalesPersonID = S.BusinessEntityID
JOIN 
    Person.Person AS SP ON S.BusinessEntityID = SP.BusinessEntityID
GROUP BY 
    SP.FirstName, SP.LastName
ORDER BY 
    NumberOfOrders DESC;
